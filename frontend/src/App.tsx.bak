import { useState } from 'react';
import { Zap, FileText, Key, Loader2, AlertCircle, CheckCircle, X, History } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import './App.css';

// API base URL
const API_BASE_URL = 'http://localhost:5000/api/v1';

interface Finding {
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  title: string;
  description: string;
  recommendation: string;
  location?: {
    file: string;
    line: number;
    codeSnippet: string;
  };
}

// Removed unused interfaces and hooks to clean up the code

// Handle Run Audit
const handleRunAudit = async () => {
  const contractAddress = prompt('Enter the contract address to audit:');
  const network = prompt('Enter the network (ethereum, polygon, bsc, avalanche):', 'ethereum');
  const sourceCode = prompt('Paste your contract source code:');
  const contractName = prompt('Enter the contract name:');
  
  if (!contractAddress || !network || !sourceCode || !contractName) {
    alert('All fields are required');
    return;
  }

  try {
    const response = await fetch(`${API_BASE_URL}/audits`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token') || ''}`,
      },
      body: JSON.stringify({
        contractAddress,
        network,
        sourceCode,
        contractName,
      }),
    });

    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.message || 'Failed to start audit');
    }

    alert(`Audit started! ID: ${data.data._id}\nStatus: ${data.data.status}`);
    
    // Poll for audit completion
    pollAuditStatus(data.data._id);
  } catch (error) {
    console.error('Error running audit:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    alert(`Failed to start audit: ${errorMessage}`);
  }
};

// Poll audit status until completed or failed
const pollAuditStatus = async (auditId: string) => {
  try {
    let attempts = 0;
    const maxAttempts = 30; // 5 minutes with 10-second intervals
    
    const checkStatus = async () => {
      attempts++;
      
      const response = await fetch(`${API_BASE_URL}/audits/${auditId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token') || ''}`,
        },
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Failed to check audit status');
      }
      
      const audit = data.data;
      
      if (audit.status === 'completed' || audit.status === 'failed' || attempts >= maxAttempts) {
        if (audit.status === 'completed') {
          alert(`Audit completed! Score: ${audit.score || 'N/A'}\nFindings: ${audit.findings.length}`);
        } else if (audit.status === 'failed') {
          alert('Audit failed. Please try again.');
        } else {
          alert('Audit is taking longer than expected. Please check back later.');
        }
        return;
      }
      
      // Check again in 10 seconds
      setTimeout(checkStatus, 10000);
    };
    
  } catch (error) {
    console.error('Error polling audit status:', error);
  }
};

// Removed unused function to clean up lint errors

// Removed unused import to clean up lint errors
      ${latestReport.findings?.map((f: Finding, i: number) => 
        `\n${i + 1}. [${f.severity.toUpperCase()}] ${f.title}\n   ${f.description}\n   Recommendation: ${f.recommendation}`
      ).join('\n') || 'No findings'}
    `;

    alert(`Latest Audit Report:\n${reportDetails}`);
  } catch (error) {
    console.error('Error fetching reports:', error);
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
    alert(`Failed to fetch reports: ${errorMessage}`);
  }
};

// This function is now handled within the component

function App() {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState({
    runAudit: false,
    viewReports: false,
    threatHistory: false,
    getApiKey: false
  });
  const [apiKey, setApiKey] = useState<string | null>(null);
  const [showApiKeyModal, setShowApiKeyModal] = useState(false);
  const [notification, setNotification] = useState<{type: 'success' | 'error' | 'info', message: string} | null>(null);

  const showNotification = (type: 'success' | 'error' | 'info', message: string) => {
    setNotification({ type, message });
    setTimeout(() => setNotification(null), 5000);
  };

  const handleRunAuditWithFeedback = async () => {
    try {
      setIsLoading(prev => ({ ...prev, runAudit: true }));
      await handleRunAudit();
      showNotification('success', 'Audit started successfully!');
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Failed to start audit';
      showNotification('error', `Error: ${message}`);
    } finally {
      setIsLoading(prev => ({ ...prev, runAudit: false }));
    }
  };

  const handleViewReportsWithFeedback = async () => {
    try {
      setIsLoading(prev => ({ ...prev, viewReports: true }));
      navigate('/reports');
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Failed to load reports';
      showNotification('error', `Error: ${message}`);
    } finally {
      setIsLoading(prev => ({ ...prev, viewReports: false }));
    }
  };

  const handleThreatHistory = async () => {
    try {
      setIsLoading(prev => ({ ...prev, threatHistory: true }));
      navigate('/threat-history');
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Failed to load threat history';
      showNotification('error', `Error: ${message}`);
    } finally {
      setIsLoading(prev => ({ ...prev, threatHistory: false }));
    }
  };

  const handleGetApiKeyWithFeedback = async () => {
    try {
      setIsLoading(prev => ({ ...prev, getApiKey: true }));
      const token = localStorage.getItem('token');
      if (!token) {
        showNotification('error', 'Please log in to get your API key');
        return;
      }

      const response = await fetch(`${API_BASE_URL}/auth/apikey`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Failed to fetch API key');
      }

      setApiKey(data.apiKey);
      setShowApiKeyModal(true);
      
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Failed to get API key';
      showNotification('error', `Error: ${message}`);
    } finally {
      setIsLoading(prev => ({ ...prev, getApiKey: false }));
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      showNotification('success', 'API key copied to clipboard!');
    } catch (err) {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      showNotification('info', 'API key copied to clipboard!');
    }
  };

  return (
    <div className="app">
      <header className="app-header">
        <h1>RaceFi Security Dashboard</h1>
        <p className="app-subtitle">Smart Contract Security Analysis Platform</p>
      </header>
      
      <main className="main-content">
        <div className="dashboard-header">
          <h2>Quick Actions</h2>
          <p className="dashboard-description">Manage your smart contract security audits and API access</p>
        </div>
        
        <div className="quick-actions">
          <button 
            className="action-card"
            onClick={handleRunAuditWithFeedback}
            disabled={isLoading.runAudit}
            aria-label="Run Security Audit"
          >
            <div className="action-icon">
              {isLoading.runAudit ? (
                <Loader2 className="spin" size={32} />
              ) : (
                <Zap size={32} className="icon-zap" />
              )}
            </div>
            <h3>Run Audit</h3>
            <p>Start a new security audit for your smart contracts</p>
            <div className="action-badge">New</div>
          </button>
          
          <button 
            className="action-card"
            onClick={handleViewReportsWithFeedback}
            disabled={isLoading.viewReports}
            aria-label="View Audit Reports"
          >
            <div className="action-icon">
              {isLoading.viewReports ? (
                <Loader2 className="spin" size={32} />
              ) : (
                <FileText size={32} className="icon-file" />
              )}
            </div>
            <h3>View Reports</h3>
            <p>View and analyze previous audit reports and findings</p>
          </button>
          
          <button 
            className="action-card"
            onClick={handleThreatHistory}
            disabled={isLoading.threatHistory}
            aria-label="View Threat History"
          >
            <div className="action-icon">
              {isLoading.threatHistory ? (
                <Loader2 className="spin" size={32} />
              ) : (
                <History size={32} className="icon-history" />
              )}
            </div>
            <h3>Threat History</h3>
            <p>Review historical security threats and vulnerabilities</p>
          </button>
          
          <button 
            className="action-card"
            onClick={handleGetApiKeyWithFeedback}
            disabled={isLoading.getApiKey}
            aria-label="Get API Key"
          >
            <div className="action-icon">
              {isLoading.getApiKey ? (
                <Loader2 className="spin" size={32} />
              ) : (
                <Key size={32} className="icon-key" />
              )}
            </div>
            <h3>Get API Key</h3>
            <p>Generate a new API key for integration with CI/CD</p>
          </button>
        </div>

        {/* API Key Modal */}
        {showApiKeyModal && (
          <div className="modal-overlay" onClick={() => setShowApiKeyModal(false)}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <div className="modal-header">
                <h3>Your API Key</h3>
                <button 
                  className="close-button" 
                  onClick={() => setShowApiKeyModal(false)}
                  aria-label="Close"
                >
                  <X size={20} />
                </button>
              </div>
              <div className="api-key-container">
                <code className="api-key">{apiKey}</code>
                <button 
                  className="copy-button"
                  onClick={() => apiKey && copyToClipboard(apiKey)}
                  aria-label="Copy API key to clipboard"
                >
                  Copy
                </button>
              </div>
              <p className="api-key-warning">
                <AlertCircle size={16} /> Keep this key secure and do not share it with others.
              </p>
            </div>
          </div>
        )}

        {/* Notification System */}
        {notification && (
          <div className={`notification ${notification.type}`}>
            <div className="notification-content">
              {notification.type === 'success' && <CheckCircle size={20} />}
              {notification.type === 'error' && <AlertCircle size={20} />}
              {notification.type === 'info' && <AlertCircle size={20} />}
              <span>{notification.message}</span>
              <button 
                className="notification-close"
                onClick={() => setNotification(null)}
                aria-label="Close notification"
              >
                <X size={16} />
              </button>
            </div>
          </div>
        )}
      </main>
      
      <footer className="app-footer">
        <p>© {new Date().getFullYear()} RaceFi Security Dashboard. All rights reserved.</p>
        <div className="footer-links">
          <a href="/docs" target="_blank" rel="noopener noreferrer">Documentation</a>
          <a href="/privacy" target="_blank" rel="noopener noreferrer">Privacy Policy</a>
          <a href="/terms" target="_blank" rel="noopener noreferrer">Terms of Service</a>
        </div>
      </footer>
    </div>
  );
}

export default App
